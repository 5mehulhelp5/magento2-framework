<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2025 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\Framework\Magento2\DateTime;

use DateTime;

class Week extends AbstractDateTime
{
    /**
     * @var int
     */
    const DAY_OF_WEEK_MONDAY = 1;

    /**
     * @var int
     */
    const DAY_OF_WEEK_TUESDAY = 2;

    /**
     * @var int
     */
    const DAY_OF_WEEK_WEDNESDAY = 3;

    /**
     * @var int
     */
    const DAY_OF_WEEK_THURSDAY = 4;

    /**
     * @var int
     */
    const DAY_OF_WEEK_FRIDAY = 5;

    /**
     * @var int
     */
    const DAY_OF_WEEK_SATURDAY = 6;

    /**
     * @var int
     */
    const DAY_OF_WEEK_SUNDAY = 7;

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return bool
     */
    public function isWeekend($datetime = null): bool
    {
        return (self::getDayOfWeek($datetime) >= 6);
    }

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return bool
     */
    public function isWeekday($datetime = null): bool
    {
        return !self::isWeekend($datetime);
    }

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return bool
     */
    public function isMonday($datetime = null): bool
    {
        return (self::getDayOfWeek($datetime) == self::DAY_OF_WEEK_MONDAY);
    }

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return bool
     */
    public function isTuesday($datetime = null): bool
    {
        return (self::getDayOfWeek($datetime) == self::DAY_OF_WEEK_TUESDAY);
    }

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return bool
     */
    public function isWednesday($datetime = null): bool
    {
        return (self::getDayOfWeek($datetime) == self::DAY_OF_WEEK_WEDNESDAY);
    }

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return bool
     */
    public function isThursday($datetime = null): bool
    {
        return (self::getDayOfWeek($datetime) == self::DAY_OF_WEEK_THURSDAY);
    }

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return bool
     */
    public function isFriday($datetime = null): bool
    {
        return (self::getDayOfWeek($datetime) == self::DAY_OF_WEEK_FRIDAY);
    }

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return bool
     */
    public function isSaturday($datetime = null): bool
    {
        return (self::getDayOfWeek($datetime) == self::DAY_OF_WEEK_SATURDAY);
    }

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return bool
     */
    public function isSunday($datetime = null): bool
    {
        return (self::getDayOfWeek($datetime) == self::DAY_OF_WEEK_SUNDAY);
    }

    /**
     * @param null|string|int|DateTime $datetime
     *
     * @return false|string
     */
    public function getDayOfWeek($datetime = null): string
    {
        return date('N', self::getDatetime($datetime));
    }
}

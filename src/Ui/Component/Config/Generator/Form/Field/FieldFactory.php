<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2025 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\Framework\Magento2\Ui\Component\Config\Generator\Form\Field;

use InvalidArgumentException;
use Magento\Framework\App\ObjectManager;

/**
 * Factory for creating form field configuration generators
 */
class FieldFactory
{
    /**
     * @var array
     */
    private array $fieldTypes = [
        'text' => Text::class,
        'textarea' => Textarea::class,
        'select' => Select::class,
        'date' => Date::class,
        'checkbox' => Checkbox::class,
        'toggle' => Toggle::class,
        'number' => Number::class,
        'file' => File::class,
        'hidden' => Hidden::class,
        'wysiwyg' => Wysiwyg::class
    ];

    /**
     * @var array
     */
    private array $instances = [];

    /**
     * Create a field configuration generator
     *
     * @param string $type Field type
     * @param array $arguments Constructor arguments
     * @return FieldInterface
     * @throws InvalidArgumentException If field type is not supported
     */
    public function create(string $type, array $arguments = []): FieldInterface
    {
        if (!isset($this->fieldTypes[$type])) {
            throw new InvalidArgumentException(sprintf('Field type "%s" is not supported.', $type));
        }

        $className = $this->fieldTypes[$type];

        // Return cached instance if no arguments are provided
        $cacheKey = $type . '_' . md5(serialize($arguments));
        if (empty($arguments) && isset($this->instances[$cacheKey])) {
            return $this->instances[$cacheKey];
        }

        $objectManager = ObjectManager::getInstance();
        $instance = $objectManager->create($className, $arguments);

        // Cache the instance for future use
        $this->instances[$cacheKey] = $instance;

        return $instance;
    }

    /**
     * Add a custom field type to the factory
     *
     * @param string $type Field type
     * @param string $className Field class name
     * @return $this
     * @throws InvalidArgumentException If class doesn't implement FieldInterface
     */
    public function addFieldType(string $type, string $className): self
    {
        if (!class_exists($className)) {
            throw new InvalidArgumentException(sprintf('Class "%s" does not exist.', $className));
        }

        if (!is_subclass_of($className, FieldInterface::class)) {
            throw new InvalidArgumentException(
                sprintf('Class "%s" must implement %s.', $className, FieldInterface::class)
            );
        }

        $this->fieldTypes[$type] = $className;
        return $this;
    }
}

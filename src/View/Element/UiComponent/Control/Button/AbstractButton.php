<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2025 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\Framework\Magento2\View\Element\UiComponent\Control\Button;

use Magento\Backend\Block\Widget\Context;
use Magento\Framework\View\Element\UiComponent\Control\ButtonProviderInterface;

/**
 * AbstractButton class provides a base implementation for UI component buttons.
 * It implements the ButtonProviderInterface and offers utility methods
 * for generating URLs, retrieving request parameters, and defining button properties.
 */
abstract class AbstractButton implements ButtonProviderInterface
{
    /**
     * @var Context The context object providing access to request and URL builder.
     */
    protected Context $context;

    /**
     * Constructor.
     *
     * @param Context $context The context object.
     */
    public function __construct(
        Context $context
    ) {
        $this->context = $context;
    }

    /**
     * Generate a URL based on the given route and parameters.
     *
     * @param string $route The route path.
     * @param array $params The route parameters.
     * @return string The generated URL.
     */
    protected function getUrl(string $route = '', array $params = []): string
    {
        return $this->context->getUrlBuilder()->getUrl($route, $params);
    }

    /**
     * Retrieve a request parameter by its key.
     *
     * @param string $key The parameter key.
     * @param mixed $default The default value if the parameter is not found.
     * @return mixed The parameter value or the default value.
     */
    protected function getRequestParam(string $key, $default = null)
    {
        return $this->context->getRequest()->getParam($key, $default);
    }

    /**
     * Retrieve the ID from the request parameters.
     *
     * @return int|null The ID as an integer or null if not found.
     */
    protected function getRequestId(): ?int
    {
        return (int) $this->getRequestParam((string) $this->getRequestIdKey());
    }

    /**
     * Retrieve the key used to identify the ID in the request parameters.
     *
     * @return string|null The ID key or null if not defined.
     */
    protected function getRequestIdKey(): ?string
    {
        return null;
    }

    /**
     * Retrieve the label for the button.
     *
     * @return string|null The label or null if not defined.
     */
    protected function getLabel(): ?string
    {
        return null;
    }

    /**
     * Retrieve the sort order for the button.
     *
     * @return ?int The sort order value.
     */
    protected function getSortOrder(): ?int
    {
        return null;
    }

    /**
     * Retrieve the CSS class for the button.
     *
     * @return string|null The CSS class or null if not defined.
     */
    protected function getClass(): ?string
    {
        return null;
    }
}

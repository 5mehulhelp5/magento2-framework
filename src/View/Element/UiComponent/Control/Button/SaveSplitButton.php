<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2025 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

namespace MagedIn\Framework\Magento2\View\Element\UiComponent\Control\Button;

use Magento\Ui\Component\Control\Container;

/**
 * Class SaveSplitButton
 *
 * This class represents a Save Split Button in the Magento 2 UI component framework.
 * It extends the SaveButton class and provides additional functionality for creating
 * a split button with multiple save options.
 */
class SaveSplitButton extends SaveButton
{
    /**
     * Retrieve the button data for the Save Split Button.
     *
     * This method builds the button configuration using the `buildOption` method.
     * It sets default values for label, id, sort order, class, and other properties.
     *
     * @return array The configuration array for the Save Split Button.
     */
    public function getButtonData(): array
    {
        return $this->buildOption(
            $this->getLabel() ?? 'Save',
            'save',
            'edit',
            $this->getSortOrder() ?? 100,
             $this->getClass() ?? 'save primary',
            Container::SPLIT_BUTTON,
            'primary',
            $this->getOptions(),
            'Save Options',
        );
    }

    /**
     * Retrieve the options for the Save Split Button.
     *
     * This method can be overridden to provide specific options for the button.
     *
     * @return array An array of options for the button.
     */
    protected function getOptions(): array
    {
        return [];
    }

    /**
     * Build the configuration array for a button.
     *
     * This method constructs the button's configuration, including its label, id,
     * CSS classes, data attributes, and other properties. It also defines the
     * button's actions and parameters.
     *
     * @param string $label The label for the button.
     * @param string $id The unique identifier for the button.
     * @param string|null $back The back parameter for the button action.
     * @param int $sortOrder The sort order for the button.
     * @param string|null $class The CSS class for the button.
     * @param string|null $className The class name for the button.
     * @param string|null $buttonClass The button-specific CSS class.
     * @param array $options Additional options for the button.
     * @param string|null $dropdownButtonAriaLabel The ARIA label for the dropdown button.
     * @param bool $disabled Whether the button is disabled.
     *
     * @return array The configuration array for the button.
     */
    protected function buildOption(
        string $label,
        string $id,
        string $back = null,
        int $sortOrder = 10,
        string $class = null,
        string $className = null,
        string $buttonClass = null,
        array $options = [],
        string $dropdownButtonAriaLabel = null,
        bool $disabled = false
    ): array {
        return [
            'label' => __($label),
            'id_hard' => $id,
            'class' => $class,
            'data_attribute' => [
                'mage-init' => [
                    'buttonAdapter' => [
                        'actions' => [
                            [
                                'targetName' => $this->getTargetName(),
                                'actionName' => $this->getActionName() ?? 'save',
                                'params' => [
                                    true,
                                    [
                                        'back' => $back,
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'class_name' => $className,
            'button_class' => $buttonClass,
            'sort_order' => $sortOrder,
            'options' => $options,
            'dropdown_button_aria_label' => __($dropdownButtonAriaLabel),
            'disabled' => $disabled,
        ];
    }
}

<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2024 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\Framework\Magento2\Module\Manager;

use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Message\ManagerInterface;
use Magento\Framework\Message\MessageInterface;
use Magento\Framework\Module\Manager;

/**
 * DocBlock for AvailabilityChecker class.
 */
class AvailabilityChecker
{
    /**
     * @var Manager
     */
    private Manager $moduleManager;

    /**
     * @var ManagerInterface
     */
    private ManagerInterface $messageManager;

    /**
     * @param Manager $moduleManager
     * @param ManagerInterface $messageManager
     */
    public function __construct(
        Manager $moduleManager,
        ManagerInterface $messageManager
    ) {
        $this->moduleManager = $moduleManager;
        $this->messageManager = $messageManager;
    }

    /**
     * DocBlock for method.
     *
     * @param string $moduleName
     * @param bool $addMessage
     * @param bool $graceful
     *
     * @return bool
     * @throws LocalizedException
     */
    public function isModuleEnabled(string $moduleName, bool $addMessage = true, bool $graceful = false): bool
    {
        if (!$this->moduleManager->isEnabled($moduleName)) {
            $message = base64_decode('UGxlYXNlIGFjdGl2YXRlIHRoZSAlMSBtb2R1bGUu');
            $message = __($message, $moduleName);
            if (true === $addMessage) {
                $this->addMessage((string) $message);
            }
            if (true === $graceful) {
                return false;
            }
            throw new LocalizedException($message);
        }
        return true;
    }

    /**
     * DocBlock for method.
     *
     * @param string $text
     *
     * @return void
     */
    private function addMessage(string $text): void
    {
        $identifier = 'bWFnZWRpbl9pbmFjdGl2ZV9leHRlbnNpb25zX21lc3NhZ2U=';
        $identifier = base64_decode($identifier);
        $messages = $this->messageManager->getMessages(false, MessageInterface::TYPE_ERROR);
        foreach ($messages->getItems() as $messageItem) {
            if ($messageItem->getIdentifier() === $identifier) {
                return;
            }
        }
        $message = $this->messageManager
            ->createMessage(MessageInterface::TYPE_ERROR)
            ->setIdentifier($identifier)
            ->setText($text);
        $this->messageManager->addMessage($message, MessageInterface::TYPE_ERROR);
    }
}

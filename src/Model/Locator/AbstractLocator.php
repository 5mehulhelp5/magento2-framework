<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2025 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\Framework\Magento2\Model\Locator;

use Magento\Framework\App\ObjectManager;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Registry;

/**
 * DocBlock for AbstractLocator class.
 */
abstract class AbstractLocator implements LocatorInterface
{
    /**
     * @var Registry
     */
    protected Registry $registry;

    /**
     * @var RequestInterface
     */
    protected RequestInterface $request;

    /**
     * @param Registry $registry
     * @param RequestInterface $request
     */
    public function __construct(
        Registry $registry,
        RequestInterface $request
    ) {
        $this->registry = $registry;
        $this->request = $request;
    }

    /**
     * Locate Synonym from registry or request parameters
     *
     * This method tries to find a profile in the following order:
     * 1. First check the registry for an already loaded profile
     * 2. If not found, try to get the profile_id from request parameters and load it
     * 3. If neither source provides a valid profile, return null
     *
     * @param int|null $id
     *
     * @return object|null
     */
    public function get(?int $id = null): ?object
    {
        // Try to get profile from registry first
        $model = $this->registry->registry($this->getRegistryKey());
        if (is_subclass_of($model, $this->getModelClassName()) && $model->getId()) {
            return $model;
        }
        if (empty($id)) {
            return null;
        }
        try {
            if ($this->getRepository() && method_exists($this->getRepository(), 'getById')) {
                $model = $this->getRepository()->getById($id);
                $this->registry->register($this->getRegistryKey(), $model);
            }
            return $model;
        } catch (NoSuchEntityException $e) {
            return null;
        }
    }

    public function resolveId(int $id = null): ?int
    {
        // If not in registry, try to load by ID from request
        if (empty($id)) {
            $id = (int) $this->request->getParam($this->getRequestFieldName());
        }
        if ($id) {
            return $id;
        }
        return null;
    }

    /**
     * Create a new instance of StopWordInterface
     *
     * @param array $data
     * @return mixed
     */
    public function createNewInstance(array $data = [])
    {
        return ObjectManager::getInstance()->create($this->getModelClassName(), $data);
    }

    /**
     * DocBlock for method.
     *
     * @return string
     */
    abstract public function getRegistryKey(): string;

    /**
     * DocBlock for method.
     *
     * @return string
     */
    abstract public function getRequestFieldName(): string;

    /**
     * DocBlock for method.
     *
     * @return mixed
     */
    abstract public function getRepositoryClassName(): string;

    /**
     * DocBlock for method.
     *
     * @return string
     */
    abstract public function getModelClassName(): string;

    /**
     * Get the model class name
     *
     * @return object
     */
    private function getRepository(): object
    {
        return ObjectManager::getInstance()->create($this->getRepositoryClassName());
    }
}
